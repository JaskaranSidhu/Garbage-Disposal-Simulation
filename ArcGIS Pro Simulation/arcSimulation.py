import random

# GLOBAL CONSTANTS

BIN_LIMIT = 60000  # The capacity of waste bins

NUM_OF_HOUSES = 0  # Number of houses in the neighbourhood we are simulating
AVERAGE_NUM_PER_HOUSE = 0.00  # The average number of people living in each house
AVERAGE_WASTE_PER_PERSON = 1008  # The average amount of waste produced per person per day (in grams)
PEOPLE_DEVIATION = 0.00  # The standard deviation we will be using to simulate the number of people per house
WASTE_DEVIATION = 300.0  # The SD we will be using to simulate the amount of waste produced per day
DAYS = 21  # The number of days we are looking at in the simulation
MAX_FULL_BINS = 0.05  # The maximum number of full bin we can have in percentage. (dependant on policy)

CURRENT_DAY = 1  # To keep track of the current day.
TOTAL_WASTE = 0  # Total waste produced
TOTAL_RUNS = 1000  # The number of iteration the simulation will be running for.

HOUSE_QUANTITY_ARRAY = []  # An array that will keep track of the number of people per house.
HOUSE_WASTE_ARRAY = []  # An array that will keep track of the amount of waste produced per house.
NUM_OF_FULL_BINS = []  # The number of bins in the community that are full, the index is the day.
EXCESS_WASTE = []  # Amount of excess waste produced that will not be collected


# main method to call in ArcGIS calculate field, example Expression:
# run(!Occ_Dwel!, !res_cnt!, !comm_struc!)
def run(house_number, res_count, community_class):
    # Call to global variables
    global CURRENT_DAY, NUM_OF_HOUSES, AVERAGE_NUM_PER_HOUSE, NUM_OF_FULL_BINS, TOTAL_RUNS, DAYS, PEOPLE_DEVIATION

    # Filter out input data, community_class specific to Calgary census data
    # https://data.calgary.ca/Demographics/Census-by-Community-2018/cc4n-ndvs
    if community_class == "CENTRE CITY" or \
            community_class == "EMPLOYMENT" or \
            community_class == "INNER CITY" or \
            community_class == "OTHER" or \
            community_class == "PARKS" or \
            community_class == "UNDEVELOPED":
        return -1
    if res_count < 1:
        return -1
    if house_number < 1:
        return -1

    NUM_OF_HOUSES = house_number
    AVERAGE_NUM_PER_HOUSE = res_count / NUM_OF_HOUSES
    PEOPLE_DEVIATION = AVERAGE_NUM_PER_HOUSE * 0.25

    # Run simulation
    generate_people()
    simulate_waste()

    percent_full_bins = 0.00
    CURRENT_DAY = 1
    while (percent_full_bins <= MAX_FULL_BINS) and (CURRENT_DAY <= DAYS):
        percent_full_bins = NUM_OF_FULL_BINS[CURRENT_DAY - 1] / TOTAL_RUNS
        percent_full_bins = (percent_full_bins / NUM_OF_HOUSES)
        CURRENT_DAY += 1
    return CURRENT_DAY


def generate_people():
    for houseID in range(NUM_OF_HOUSES):
        HOUSE_QUANTITY_ARRAY.append(abs(round(random.gauss(AVERAGE_NUM_PER_HOUSE, PEOPLE_DEVIATION), 0)))

    for day in range(DAYS):
        EXCESS_WASTE.append(0)
        NUM_OF_FULL_BINS.append(0)


# This function is simulating the waste generated by each household.
def simulate_waste():
    global CURRENT_DAY, TOTAL_WASTE

    for iterations in range(TOTAL_RUNS):
        CURRENT_DAY = 1
        TOTAL_WASTE = 0
        HOUSE_WASTE_ARRAY.clear()

        for houseID in range(NUM_OF_HOUSES):
            HOUSE_WASTE_ARRAY.append(
                random.gauss((HOUSE_QUANTITY_ARRAY[houseID] * AVERAGE_WASTE_PER_PERSON), WASTE_DEVIATION))
            TOTAL_WASTE += HOUSE_WASTE_ARRAY[houseID]

        calc_full_bins()
        CURRENT_DAY += 1

        for index in range(DAYS - 1):
            TOTAL_WASTE = 0

            for house in range(NUM_OF_HOUSES):
                HOUSE_WASTE_ARRAY[house] += random.gauss((HOUSE_QUANTITY_ARRAY[house] * AVERAGE_WASTE_PER_PERSON),WASTE_DEVIATION)
                TOTAL_WASTE += HOUSE_WASTE_ARRAY[house]

            calc_full_bins()
            CURRENT_DAY += 1


def calc_full_bins():
    global EXCESS_WASTE, NUM_OF_FULL_BINS, CURRENT_DAY, HOUSE_WASTE_ARRAY

    for i in range(NUM_OF_HOUSES):

        if HOUSE_WASTE_ARRAY[i] >= BIN_LIMIT:
            NUM_OF_FULL_BINS[CURRENT_DAY - 1] += 1
            EXCESS_WASTE[CURRENT_DAY - 1] += (HOUSE_WASTE_ARRAY[i] - BIN_LIMIT)
