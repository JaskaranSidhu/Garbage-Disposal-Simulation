#########################
######## IMPORTS ########
#########################

import random 

################################################
############### GLOBAL CONSTANTS ###############
################################################

BIN_LIMIT = 50000						# The capacity of waste bins 

NUM_OF_HOUSES = 10700					# Number of houses in the neighbourhood we are simulating
AVERAGE_NUM_PER_HOUSE = 2.878			# The average number of people living in each house
AVERAGE_WASTE_PER_PERSON = 939			# The average amount of waste produced per person per day (in grams)
PEOPLE_DEVIATION = 0.719				# The standard deviation we will be using to simulate the number of people per house
WASTE_DEVIATION = 281.7					# The standard deviation we will be using to simulate the amount of waste produced per day
DAYS = 16								# The number of days we are looking at in the simulation


CURRENT_DAY = 1							# To keep track of the current day.
TOTAL_WASTE = 0							# Total waste produced
EXCESS_WASTE = 0						# Amount of excess waste produced that will not be collected
NUM_OF_FULL_BINS = 0					# The number of bins in the comunity that are full

HOUSE_QUANTITY_ARRAY = []				# An array that will keep track of the number of people per house. 
HOUSE_WASTE_ARRAY = []					# An array that will keep track of the amount of waste produced per house. 


def main():
	generatePeople()
	simulateWaste()
	clearing()



def generatePeople():
	for houseID in range(NUM_OF_HOUSES):
		HOUSE_QUANTITY_ARRAY.append(abs(round(random.gauss(AVERAGE_NUM_PER_HOUSE, PEOPLE_DEVIATION), 0)))


# This function is simulating the waste generated by each household. 
def simulateWaste():
	global CURRENT_DAY, TOTAL_WASTE

	for houseID in range(NUM_OF_HOUSES):
		HOUSE_WASTE_ARRAY.append(random.gauss((HOUSE_QUANTITY_ARRAY[houseID] * AVERAGE_WASTE_PER_PERSON), WASTE_DEVIATION))
		TOTAL_WASTE += HOUSE_WASTE_ARRAY[houseID]

	printDay()
	CURRENT_DAY += 1

	for index in range(DAYS - 1):
		TOTAL_WASTE = 0

		for house in range(NUM_OF_HOUSES):
			HOUSE_WASTE_ARRAY[house] += random.gauss((HOUSE_QUANTITY_ARRAY[house] * AVERAGE_WASTE_PER_PERSON), WASTE_DEVIATION)
			TOTAL_WASTE += HOUSE_WASTE_ARRAY[house]

		printDay()
		CURRENT_DAY += 1

# This function will store all the results for each day in a file, 
# that will later be used to display the final results
def printDay():
	global CURRENT_DAY, TOTAL_WASTE, NUM_OF_HOUSES, EXCESS_WASTE, NUM_OF_FULL_BINS

	calcFullBins()

	lineNum = 1
	avgF = open("AvgFilled.txt", "r")
	lines = avgF.readlines()
	avgF.close()
	outAvgF = open("AvgFilled.txt", "w")
	for line in lines:
		if(CURRENT_DAY == lineNum):
			outAvgF.write(str(float(line) + (((TOTAL_WASTE - EXCESS_WASTE) / NUM_OF_HOUSES) / BIN_LIMIT) * 100) + '\n')
			lineNum += 1
		else:
			outAvgF.write(line)
			lineNum += 1


	lineNum = 1
	fullBinsF = open("fullBins.txt", "r")
	lines = fullBinsF.readlines()
	fullBinsF.close()
	outFullBinsF = open("fullBins.txt", "w")
	for line in lines:
		if(CURRENT_DAY == lineNum):
			outFullBinsF.write(str(int(line) + NUM_OF_FULL_BINS) + '\n')
			lineNum += 1
		else:
			outFullBinsF.write(line)
			lineNum += 1


	lineNum = 1
	excessF = open("excess.txt", "r")
	lines = excessF.readlines()
	excessF.close()
	outExcessF = open("excess.txt", "w")
	for line in lines:
		if(CURRENT_DAY == lineNum):
			outExcessF.write(str(float(line) + (EXCESS_WASTE / 1000)) + '\n')
			lineNum += 1
		else:
			outExcessF.write(line)
			lineNum += 1


	lineNum = 1
	totalF = open("total.txt", "r")
	lines = totalF.readlines()
	totalF.close()
	outTotalF = open("total.txt", "w")
	for line in lines:
		if(CURRENT_DAY == lineNum):
			outTotalF.write(str(float(line) + (TOTAL_WASTE / 1000)) + '\n')
			lineNum += 1
		else:
			outTotalF.write(line)
			lineNum += 1


def calcFullBins():
	global EXCESS_WASTE, NUM_OF_FULL_BINS

	NUM_OF_FULL_BINS = 0
	EXCESS_WASTE = 0

	for i in range(NUM_OF_HOUSES):

		if(HOUSE_WASTE_ARRAY[i] >= BIN_LIMIT):
			NUM_OF_FULL_BINS += 1
			EXCESS_WASTE += (HOUSE_WASTE_ARRAY[i] - BIN_LIMIT)

def clearing():
	global CURRENT_DAY, TOTAL_WASTE, NUM_OF_FULL_BINS, EXCESS_WASTE, HOUSE_WASTE_ARRAY
	HOUSE_WASTE_ARRAY.clear()
	CURRENT_DAY = 1
	TOTAL_WASTE = 0
	NUM_OF_FULL_BINS = 0
	EXCESS_WASTE = 0

